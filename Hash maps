#1.  Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
#    You may assume that each input would have exactly one solution, and you may not use the same element twice.

                    class Solution:
                        def twoSum(self, nums: List[int], target: int) -> List[int]:    
                            n=len(nums)
                            numMap={}
                    
                            #Assign each element a coordinate (built a hash map)
                            for i in range(n):
                                numMap[nums[i]]=i
                    
                            #find complement
                            for i in range(n):
                                complement = target - nums[i]
                                if complement in numMap and numMap[complement] !=i:
                                    return [i, numMap[complement]]
                            return [] #if no mathces

#2. A happy number is a number defined by the following process:
#        -Starting with any positive integer, replace the number by the sum of the squares of its digits.
#        -Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
#        -Those numbers for which this process ends in 1 are happy.

                    def isHappy(self, n: int) -> bool:
                    
                            current_number=n
                            numbers={}
                    
                            while 1 not in numbers:
                                current_number=sum(int(i)**2 for i in str(current_number))
                                if current_number not in numbers:
                                    numbers[current_number] =0
                                else:
                                    return False
                            return True
